package MyPackage;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Calendar;

/**
 *
 * @author swath
 */
public class TransactionPage extends javax.swing.JFrame {

    /**
     * Creates new form TransactionPage
     */
    Connection con=null;
    PreparedStatement ps;
    Statement stmt;
    public TransactionPage() {
        initComponents();
        String url = "jdbc:oracle:thin:@localhost:1521:orcl";
        String username= "scott";
        String password = "scott";     
        try{
          Class.forName("oracle.jdbc.OracleDriver");
          //JOptionPane.showMessageDialog(null,"Driver Loaded!");
          
          con = DriverManager.getConnection(url,username,password);
          stmt=con.createStatement();
//          if(con!=null){
//           JOptionPane.showMessageDialog(null,"Connected to Oracle database!");
//          }
         }
        
        catch(ClassNotFoundException ex){
           Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE,null, ex);
           JOptionPane.showMessageDialog(null,"Could not find database driver!");
         }
        catch (SQLException ex) {
           Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE,null, ex);
           JOptionPane.showMessageDialog(null,"Failed to connect to the database");
          }
    }
    public static String generateReceiptNumber(Statement stmt) throws SQLException
    {
       String ReceiptNo;
      
              String query = "SELECT MAX(RECEIPTNO) FROM ISSUE1";
              ResultSet resultSet = stmt.executeQuery(query);
              
                if (resultSet.next()) {
                String lastReceiptNumber = resultSet.getString(1);
                //System.out.println(lastReceiptNumber);
                if (lastReceiptNumber != null) {
               // Increment the last receipt number
               int number = Integer.parseInt(lastReceiptNumber.substring(1));
               number++;
               ReceiptNo = "R" + String.format("%03d", number);
                }
                else
                {
                    ReceiptNo = "R011";
                }
                
              } 
              else {
                  ReceiptNo = "R011";
               }
                return ReceiptNo;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Studentid = new javax.swing.JLabel();
        Bookid = new javax.swing.JLabel();
        no_of_books_taken_at_once = new javax.swing.JLabel();
        studentid_tf = new javax.swing.JTextField();
        bookid_tf = new javax.swing.JTextField();
        no_of_books_tf = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        Confirm = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        ReceiptNo = new javax.swing.JLabel();
        receiptno_tf = new javax.swing.JTextField();
        Studentname = new javax.swing.JLabel();
        studentname_tf = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Studentid.setFont(new java.awt.Font("Perpetua Titling MT", 0, 12)); // NOI18N
        Studentid.setText("Studentid");

        Bookid.setFont(new java.awt.Font("Perpetua Titling MT", 0, 12)); // NOI18N
        Bookid.setText("Bookid");

        no_of_books_taken_at_once.setFont(new java.awt.Font("Perpetua Titling MT", 0, 12)); // NOI18N
        no_of_books_taken_at_once.setText("No of Books Taken");

        studentid_tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                studentid_tfKeyPressed(evt);
            }
        });

        bookid_tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                bookid_tfKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Poor Richard", 0, 18)); // NOI18N
        jLabel1.setText("Enter the details for transaction");

        Confirm.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        Confirm.setText("Confirm");
        Confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmActionPerformed(evt);
            }
        });

        Clear.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        ReceiptNo.setFont(new java.awt.Font("Perpetua Titling MT", 0, 12)); // NOI18N
        ReceiptNo.setText("ReceiptNo");

        receiptno_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiptno_tfActionPerformed(evt);
            }
        });

        Studentname.setFont(new java.awt.Font("Perpetua Titling MT", 0, 12)); // NOI18N
        Studentname.setText("StudentName");

        jButton1.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(147, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(132, 132, 132))
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(ReceiptNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(no_of_books_taken_at_once, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Bookid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Studentid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(Studentname)
                    .addComponent(Confirm))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jButton1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(bookid_tf, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                        .addComponent(studentid_tf)
                        .addComponent(no_of_books_tf)
                        .addComponent(receiptno_tf)
                        .addComponent(studentname_tf)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentid_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Studentid))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentname_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Studentname))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Bookid)
                    .addComponent(bookid_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(no_of_books_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(no_of_books_taken_at_once, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(receiptno_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ReceiptNo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Confirm)
                    .addComponent(Clear)
                    .addComponent(jButton1))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        // TODO add your handling code here:
        studentid_tf.setText(null);
        bookid_tf.setText(null);
        no_of_books_tf.setText(null);
        receiptno_tf.setText(null);
    }//GEN-LAST:event_ClearActionPerformed

    private void ConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmActionPerformed
        // TODO add your handling code here:
        //TO GET NO_OF_COPIES_AVAILABLE AND EXCEPTION HANDLING 
        try{
        CallableStatement statement = con.prepareCall("{? = call GET_NO_OF_COPIES(?)}");
         statement.registerOutParameter(1, Types.INTEGER);
         statement.setString(2,bookid_tf.getText());
        statement.execute();
        int copies = statement.getInt(1);
        System.out.println("Number of copies available:"+copies);
        if(copies==0)
        {
            JOptionPane.showMessageDialog(this,"No copies available!");
        }
        else
        {
            try{
               String sql="update book2 set no_of_copies_available=? where bookid=?";
               ps=con.prepareStatement(sql);
               ps.setInt(1, copies-1);
               ps.setString(2, bookid_tf.getText());
               ps.execute();
               JOptionPane.showMessageDialog(this,"Updated!");
             }
            catch(SQLException ex){
               Logger.getLogger(TransactionPage.class.getName()).log(Level.SEVERE,null, ex);
               JOptionPane.showMessageDialog(this,ex.getMessage());
            }
         }
        }
        catch(SQLException ex)
        {
            Logger.getLogger(TransactionPage.class.getName()).log(Level.SEVERE,null, ex);
            JOptionPane.showMessageDialog(this,ex.getMessage());
        }

        try{
        CallableStatement statement = con.prepareCall("{? = call MAX_BOOK(?)}");
        statement.setString(2,studentid_tf.getText());
        statement.registerOutParameter(1, Types.INTEGER);
        statement.execute();
        int bookCount = statement.getInt(1);
        //System.out.println("Number of books taken:"+bookCount);
        if(bookCount>5)
        {
            JOptionPane.showMessageDialog(this,"Your maximum book limit exceeded! Can borrow only 5 books!");
        }
        }
        catch(SQLException ex)
        {
            Logger.getLogger(TransactionPage.class.getName()).log(Level.SEVERE,null, ex);
            JOptionPane.showMessageDialog(this,ex.getMessage());
        }
        
        int books=Integer.parseInt(no_of_books_tf.getText());
        if(books>1){
            JOptionPane.showMessageDialog(this,"Book limit exceeded");
        } 
        else if(studentid_tf.getText().length()==0)
        {
          JOptionPane.showMessageDialog(this,"Enter Your Unique ID");
        }
        else if(bookid_tf.getText().length()==0)
        {
            JOptionPane.showMessageDialog(this,"Enter the Book ID");
        }
        else if(no_of_books_tf.getText().trim().isEmpty())
        {
            JOptionPane.showMessageDialog(this,"Enter the number of books taken");
        }
        else if(studentid_tf.getText().length()!=4 || !studentid_tf.getText().startsWith("S"))
        {
            JOptionPane.showMessageDialog(this,"Invalid Student ID");
        }
        else if(bookid_tf.getText().length()!=4 || !bookid_tf.getText().startsWith("B"))
        {
            JOptionPane.showMessageDialog(this,"Invalid Book ID");
        }
        else if(bookid_tf.getText().length()==4){
            
        try{
          String sql="insert into ISSUE1(RECEIPTNO,STUDENTID,BOOKID)values(?,?,?)";
          ps=con.prepareStatement(sql);
          
          String receiptNumber=generateReceiptNumber(stmt);
          System.out.println("Generated receipt number: " + receiptNumber);
          
          receiptno_tf.setText(receiptNumber);
          
         System.out.println("From textfield:"+receiptno_tf.getText());
          ps.setString(1,receiptno_tf.getText());
          ps.setString(2,studentid_tf.getText());
          ps.setString(3,bookid_tf.getText());
          ps.execute();
          JOptionPane.showMessageDialog(this,"Inserted IN ISSUE1!");
         }
        
        catch(SQLException ex)
        {
            Logger.getLogger(TransactionPage.class.getName()).log(Level.SEVERE,null, ex);
            JOptionPane.showMessageDialog(this,ex.getMessage());
        }
        finally {
        if (ps != null) {
        try {
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(TransactionPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
}
        try
        {
          Date currentDate = new Date();
          SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
          String formattedDate = dateFormat.format(currentDate);
          System.out.println("Current date: " + formattedDate);
          
          
          Calendar calendar = Calendar.getInstance();
          calendar.setTime(currentDate);
          calendar.add(Calendar.DAY_OF_MONTH, 14);
          Date futureDate = calendar.getTime();
          String futureDateString = dateFormat.format(futureDate);
          
          String sql="insert into ISSUE2(RECEIPTNO,DATE_OF_ISSUE)values(?,?)";
         
          ps=con.prepareStatement(sql);
          ps.setString(1,receiptno_tf.getText());
          ps.setString(2,formattedDate);
          ps.execute();
          JOptionPane.showMessageDialog(this,"Inserted in ISSUE2!"); 
          
          
          
         Calendar calender = Calendar.getInstance();
         calender.setTime(currentDate);
         calendar.add(Calendar.DAY_OF_MONTH, 140);
         Date ReturnDate = calendar.getTime();
         String ReturnDateString = dateFormat.format(ReturnDate);
          
         
         String sql2="insert into ISSUE3(RECEIPTNO,RENEWAL_DATE,RETURN_DATE)VALUES(?,?,?)";
          ps=con.prepareStatement(sql2);
          ps.setString(1,receiptno_tf.getText());
          ps.setString(2,futureDateString);
          ps.setString(3,ReturnDateString);
          ps.execute();
          JOptionPane.showMessageDialog(this,"Inserted in ISSUE3!");
        }
        catch(SQLException ex)
        {
            Logger.getLogger(TransactionPage.class.getName()).log(Level.SEVERE,null, ex);
            JOptionPane.showMessageDialog(this,ex.getMessage());
        }
        
        
        //To insert into STUDENT_TAKEN_BOOKS
        try
        {
          String sql="insert into STUDENT_TAKEN_BOOKS(STUDENTID,BOOKID,STUDENTNAME,STATUS,FINE_AMOUNT)values(?,?,?,?,?)";
          int f=0;
          ps=con.prepareStatement(sql);
          ps.setString(1,studentid_tf.getText());
          ps.setString(2,bookid_tf.getText());
          ps.setString(3,studentname_tf.getText());
          ps.setString(4,"Borrowed");
          ps.setInt(5,f);
          ps.execute();
          JOptionPane.showMessageDialog(this,"Inserted in STUDENT_TAKEN_BOOKS!");
        }
        catch(SQLException ex)
        {
            Logger.getLogger(TransactionPage.class.getName()).log(Level.SEVERE,null, ex);
            JOptionPane.showMessageDialog(this,ex.getMessage());
        }
           
        
        }
      
        
            Confirmation cn=new Confirmation();
            cn.setVisible(true);
            this.setVisible(false);
        
       


        
    }//GEN-LAST:event_ConfirmActionPerformed

    private void studentid_tfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_studentid_tfKeyPressed
        // TODO add your handling code here:
    
    
    }//GEN-LAST:event_studentid_tfKeyPressed

    private void receiptno_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiptno_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_receiptno_tfActionPerformed

    private void bookid_tfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookid_tfKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_bookid_tfKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        MyJFrame j=new MyJFrame();
        j.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed
    

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransactionPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransactionPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransactionPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransactionPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TransactionPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Bookid;
    private javax.swing.JButton Clear;
    private javax.swing.JButton Confirm;
    private javax.swing.JLabel ReceiptNo;
    private javax.swing.JLabel Studentid;
    private javax.swing.JLabel Studentname;
    private javax.swing.JTextField bookid_tf;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel no_of_books_taken_at_once;
    private javax.swing.JTextField no_of_books_tf;
    private javax.swing.JTextField receiptno_tf;
    private javax.swing.JTextField studentid_tf;
    private javax.swing.JTextField studentname_tf;
    // End of variables declaration//GEN-END:variables
}
